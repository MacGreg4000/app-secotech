## Modifications à appliquer manuellement

### 1. Correction des erreurs de linter dans src/app/api/chantiers/[chantierId]/documents/route.ts

Recherchez cette section (vers la ligne 70) :
```typescript
// Si c'est une erreur Prisma, on log plus de détails
if (error.code) {
  console.error('Erreur Prisma:', {
    code: error.code,
    meta: error.meta,
    clientVersion: error.clientVersion
  })
}
```

Et remplacez-la par :
```typescript
// Si c'est une erreur Prisma, on log plus de détails
if ('code' in error) {
  console.error('Erreur Prisma:', {
    code: error.code,
    meta: error.meta,
    clientVersion: error.clientVersion
  })
}
```

Recherchez cette ligne (vers la ligne 83) :
```typescript
code: error.code
```

Et remplacez-la par :
```typescript
code: 'code' in error ? error.code : undefined
```

### 2. Correction du problème de contrainte de clé étrangère

Dans la fonction POST, recherchez cette section (vers la ligne 170-180) :
```typescript
const document = await prisma.document.create({
  data: {
    nom: file.name,
    type: documentType,
    url: `/uploads/documents/${params.chantierId}/${file.name}`,
    taille: file.size,
    mimeType: file.type,
    chantierId: params.chantierId,
    createdBy: session.user.id,
    updatedAt: new Date()
  },
```

Et remplacez `createdBy: session.user.id` par `createdBy: userExists.id` :
```typescript
const document = await prisma.document.create({
  data: {
    nom: file.name,
    type: documentType,
    url: `/uploads/documents/${params.chantierId}/${file.name}`,
    taille: file.size,
    mimeType: file.type,
    chantierId: params.chantierId,
    createdBy: userExists.id, // Utiliser l'ID vérifié
    updatedAt: new Date()
  },
```

### 3. Ajout de logs pour le débogage des erreurs Prisma

Dans la fonction POST, recherchez cette section (vers la ligne 190-200) :
```typescript
} catch (dbError: any) {
  console.error('Erreur lors de la création du document dans la base de données:', dbError.message)
  return NextResponse.json(
    { error: `Erreur lors de la création du document dans la base de données: ${dbError.message}` },
    { status: 500 }
  )
}
```

Et remplacez-la par :
```typescript
} catch (dbError: any) {
  console.error('Erreur lors de la création du document dans la base de données:', dbError.message)
  // Afficher plus de détails sur l'erreur Prisma
  if (dbError.code) {
    console.error('Code d\'erreur Prisma:', dbError.code)
    console.error('Métadonnées d\'erreur Prisma:', dbError.meta)
  }
  return NextResponse.json(
    { error: `Erreur lors de la création du document dans la base de données: ${dbError.message}` },
    { status: 500 }
  )
}
``` 